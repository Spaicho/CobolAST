£ifndef AST_H_INCLUDED
£define AST_H_INCLUDED

£pragma map(make_ident_name_qualif,    "mkidnq")
£pragma map(make_ident_name       ,    "mkidnm")
£pragma map(make_ident_qualif     ,    "mkidqu")
£pragma map(make_ident_subscript  ,    "mkidsb")
£pragma map(make_ident_refmod     ,    "mkrfmd")
£pragma map(make_field            ,    "mkfild")
£pragma map(update_field          ,    "updfield")
£pragma map(update_field_init     ,    "updflint")
£pragma map(make_occurs           ,    "mkocrs")
£pragma map(make_occurs_key       ,    "mkocky")
£pragma map(make_field_sign       ,    "mkfdsn")
£pragma map(make_field_sync       ,    "mkfdsc")

£pragma map(affich_sentence       ,    "affstc")
£pragma map(affich_declaration    ,    "affdcl")
£pragma map(affich_statement      ,    "affstm")
£pragma map(affich_move_stm       ,    "affmov")
£pragma map(affich_display_stm    ,    "affdsp")
£pragma map(affich_initialize_stm ,    "affint")
£pragma map(affich_operand        ,    "affopn")
£pragma map(affich_literal        ,    "affltr")
£pragma map(affich_identifier     ,    "affidt")
£pragma map(affich_ident_name     ,    "affidn")
£pragma map(affich_ident_name_qualif,  "affinq")
£pragma map(affich_ident_qualif   ,    "affidq")
£pragma map(affich_ident_subscript,    "affids")
£pragma map(affich_ident_refmod   ,    "affidr")
£pragma map(affich_special_reg    ,    "affspr")
£pragma map(affich_arith_exp      ,    "affarx")
£pragma map(affich_binary_op      ,    "affbno")
£pragma map(affich_unary_op       ,    "affuno")
£pragma map(affich_field          ,    "afffld")

£pragma map(free_sentence         ,    "frestc")
£pragma map(free_declaration      ,    "fredcl")
£pragma map(free_statement        ,    "frestm")
£pragma map(free_move_stm         ,    "fremov")
£pragma map(free_display_stm      ,    "fredsp")
£pragma map(free_initialize_stm ,      "freint")
£pragma map(free_operand          ,    "freopn")
£pragma map(free_literal          ,    "freltr")
£pragma map(free_identifier       ,    "freidt")
£pragma map(free_ident_name       ,    "freidn")
£pragma map(free_ident_name_qualif,    "freinq")
£pragma map(free_ident_qualif     ,    "freidq")
£pragma map(free_ident_subscript,      "freids")
£pragma map(free_ident_refmod     ,    "freidr")
£pragma map(free_special_reg      ,    "frespr")
£pragma map(free_arith_exp        ,    "frearx")
£pragma map(free_binary_op        ,    "frebno")
£pragma map(free_unary_op         ,    "freuno")
£pragma map(free_field            ,    "frefld")
£pragma map(free_field_sign       ,    "frefls")
£pragma map(free_field_value      ,    "freflv")
£pragma map(free_field_sync       ,    "freflc")
£pragma map(free_occurs           ,    "freocr")
£pragma map(free_occurs_key       ,    "freock")

£define MAX_LIST_STATEMENT 500
£define MAX_LIST_OPERAND   500

typedef enum È CL_UNKNOWN,
               CL_EXTERNAL, CL_BLANK_WHEN_ZERO, CL_GLOBAL,
               CL_JUSTIFIED, CL_OCCURS,
               CL_PICTURE, CL_SIGN, CL_VALUE, CL_SYNCHRONIZED, CL_USAGE
Ë tag_t;

typedef enum È
       UNKNOWN_FIELD_NAME,
       FILLER,
       SPACE,
       NAME
Ë field_name;

typedef enum     È
       UNKNOWN_FIELD_LVL,
       LVL_49,
       LVL_66,
       LVL_77,
       LVL_88,
Ë field_lvl;

typedef enum     È
       UNKNOWN_PIC_CMPNT,
       PIC_CHARS,
       PIC_REPEAT,
       PIC_CURRENCY,
Ë pic_cmpnt_t;

typedef enum     È
       UNKNOWN_USAGE,
       BINARY,
       COMPUTATIONAL,
       COMP,
       COMPUTATIONAL_1,
       COMP_1,
       COMPUTATIONAL_2,
       COMP_2,
       COMPUTATIONAL_3,
       COMP_3,
       COMPUTATIONAL_4,
       COMP_4,
       DISPLAY,
       DISPLAY_1,
       INDEX,
       PACKED_DECIMAL,
       POINTER,
       PROCEDURE_POINTER
Ë usage_t;

struct ast* make_ast         ();
struct ast* make_sentence    (int, struct ast*);
struct ast* make_move        (int, int, struct ast*, struct ast*);
struct ast* make_display     (int, int, char*, int, struct ast*);
struct ast* make_initialize  (int, int, struct ast*);
struct ast* make_operand     (int, int, struct ast*);
struct ast* make_literal     (char*,int, int, int, int, int, int, int,
                              int, int, int, int, int, int);
struct ast* make_identifier  (int, int, int,
                              struct ast*, struct ast*, struct ast*,
                              struct ast*);
struct ast* make_ident_name_qualif
                             (struct ast*, struct ast*);
struct ast* make_ident_name  (int, char*);
struct ast* make_ident_qualif(struct ast*);
struct ast* make_ident_subscript
                             (struct ast*);
struct ast* make_ident_refmod(struct ast*, struct ast*);
struct ast* make_arith_exp   (char*, char*, char*,
                              struct ast*, struct ast*);
struct ast* make_field       (struct ast*, struct ast*,
                              field_name, field_lvl,
                              int,   int,   int,   int, int,
                              int,   int,   int,   int,
                              struct ast*, struct ast*, struct ast*,
                              struct ast*, struct ast*, struct ast*,
                              struct ast*, struct ast*, struct ast*,
                              struct ast*, struct ast*, struct ast*);

struct ast* update_field_init(struct ast*, struct ast*,
                              field_name, field_lvl, int lvl);

struct ast* update_field     (struct ast*, struct ast*, tag_t);

struct ast* make_occurs      (int, int, struct ast*, struct ast*,
                                        struct ast*);

struct ast* make_occurs_key  (int, int, struct ast*);

struct ast* make_pic_cmpnt   (pic_cmpnt_t, int, char*,char*);

struct ast* make_field_sign  (int, int, int, int);

struct ast* make_field_value (struct ast*, struct ast*);

struct ast* make_field_sync  (int, int);

struct ast* make_usage       (usage_t);

struct ast* make_renames     (struct ast*, struct ast*);

struct ast* append_list      (struct ast* list, struct ast* toadd);

int         chain_length     (struct ast* list);

/* Pour les listes utiliser des Arrays ou LinkedList ? */

extern char* usageValues ›~ = È
         "UNKNOWN_USAGE",
         "BINARY",
         "COMPUTATIONAL",
         "COMP",
         "COMPUTATIONAL-1",
         "COMP-1",
         "COMPUTATIONAL-2",
         "COMP-2",
         "COMPUTATIONAL-3",
         "COMP-3",
         "COMPUTATIONAL-4",
         "COMP-4",
         "DISPLAY",
         "DISPLAY-1",
         "INDEX",
         "PACKED-DECIMAL",
         "POINTER",
         "PROCEDURE-POINTER"
          Ë;
extern char* tagValues ›~ = È
         "UNKNOWN_AST",
         "SENTENCE",
         "DECLARATION",
         "FIELD",
         "OCCURS",
         "OCCURS_KEY",
         "PIC_CMPNT",
         "FIELD_SIGN",
         "FIELD_VALUE",
         "FIELD_SYNC",
         "USAGE",
         "RENAMES",
         "STATEMENT",
         "MOVE_STM","DISPLAY_STM", "INITIALIZE_STM",
         "OPERAND",
         "LITERAL",
         "IDENTIFIER", "IDENT_NAME","IDENT_NAME_QUALIF","IDENT_QUALIF",
         "IDENT_SUBSCRIPT","IDENT_REFMOD",
         "SPECIAL_REG",
         "ARITH_EXP",
         "BINARY_OP","UNARY_OP"
          Ë;
typedef struct ast È

  struct ast* next;

  enum È /* unknown   */
         UNKNOWN_AST,
         /* sentence  */
         SENTENCE,
         /* declaration */
         DECLARATION,
         /* field */
         FIELD,
         OCCURS,
         OCCURS_KEY,
         PIC_CMPNT,
         FIELD_SIGN,
         FIELD_VALUE,
         FIELD_SYNC,
         USAGE,
         RENAMES,
         /* statement */
         STATEMENT,
         MOVE_STM, DISPLAY_STM, INITIALIZE_STM,
         /* operand   */
         OPERAND,
         LITERAL,
         IDENTIFIER, IDENT_NAME, IDENT_NAME_QUALIF, IDENT_QUALIF,
         IDENT_SUBSCRIPT, IDENT_REFMOD,
         SPECIAL_REG,
         /* arith_exp */
         ARITH_EXP,
         BINARY_OP, UNARY_OP
                              Ë tag;

  union È
          struct È /* sentence    */
                   char*        ast_name;
                   int          nb_statement;
                   struct ast*  list_statement;  /* STATEMENT */
                 Ë sentence;

          struct È /* move        */
                   char*        ast_name;
                   int          bool_corresp;
                   struct ast*  operand_g;       /* OPERAND   */
                   int          nb_operand_r;
                   struct ast*  list_operand_r;  /* OPERAND   */
                 Ë move_stm;

          struct È /* display     */
                   char*        ast_name;
                   int          bool_upon;
                   int          bool_no_adv;
                   char         upon_operand›120~;
                   int          nb_operand;
                   struct ast*  list_operand;    /* OPERAND   */
                 Ë display_stm;

          struct È /* initialize  */
                   char*        ast_name;
                   int          bool_repl;
                   int          nb_operand;
                   struct ast*  list_operand;    /* OPERAND   */
                 Ë initialize_stm;

          struct È /* operand     */
                   char*        ast_name;
                   int          bool_literal;
                   int          bool_identifier;
                   struct ast*  operand;    /* LITERAL / IDENTIFIER */
                 Ë operand;

          struct È /* literal */
                   char*        ast_name;
                   char         value›120~;
                   int          bool_all;
                   int          bool_numeric;
                   int          bool_alphanumeric;
                   int          bool_hexadecimal;
                   int          bool_positive;
                   int          bool_negative;
                   int          bool_unsigned;
                   int          bool_singl_q;
                   int          bool_doubl_q;
                   int          bool_intgr;
                   int          bool_decim;
                   int          bool_figurative;

                   int          char_length;
                 Ë literal;

          struct È /* identifier  */
      /*           char*        id_name;
                   int          len_id_name;
                   int          nb_id_qualif;
                   char*        list_id_qualif›MAX_LIST_OPERAND~;
                   int          nb_id_subscript;
                   struct ast*  list_id_subscript›MAX_LIST_OPERAND~; */

                   char*        ast_name;
                   int          bool_length;
                   int          bool_address;
                   int          bool_special_reg;

                   struct ast*  name;         /* IDENT_NAME      */
                   struct ast*  qualif;       /* IDENT_QUALIF    */
                   struct ast*  subscript;    /* IDENT_SUBSCRIPT */
                   struct ast*  refmod;       /* IDENT_REFMOD    */
                 Ë identifier;

          struct È /* ident_name_qualif */
                   char*        ast_name;
                   struct ast*  name;         /* IDENT_NAME      */
                   struct ast*  qualif;       /* IDENT_QUALIF    */
                 Ë ident_name_qualif;

          struct È /* ident_name */
                   char*        ast_name;
                   int          length;
                   char         value›120~;
                 Ë ident_name;

          struct È /* ident_qualif */
                   char*        ast_name;
                   struct ast*  list_qualif;  /* IDENT_NAME      */
                 Ë ident_qualif;

          struct È /* ident_subscript */
                   char*        ast_name;
                   struct ast*  list_subscript; /* ARITH_EXP     */
                 Ë ident_subscript;

          struct È /* ident_refmod */
                   char*        ast_name;
                   struct ast*  charleft;       /* ARITH_EXP     */
                   struct ast*  length;         /* ARITH_EXP     */
                 Ë ident_refmod;

          struct È /* arith_exp   */
                   char*        ast_name;
                   char         value›120~;
                   char         oper›120~;
                   char         sign›120~;
                   struct ast*  left;           /* ARITH_EXP     */
                   struct ast*  right;          /* ARITH_EXP     */
                 Ë arith_exp;

          struct È
                   char*        ast_name;
                   char         oper›120~;
                   struct ast*  uexp;
                 Ë unary_op;

          struct È /* field       */
                   char*        ast_name; /* FIELD */
                   struct ast*  name;        /* NAME, FILLER OR SPACE */
                   struct ast*  copy;        /* Copy from which field */
                   field_name   field_name; /* filler space */
                   field_lvl    field_lvl;  /* 66 77 88 49  */
                   int          lvl;
                   int          name_length; /* character number */
                   int          size;        /* Bytes number */
                   int          offset;      /* offset from top */
                   int          nb_indexes;  /* parent nb with occurs */
                   int          bool_blank_zero;
                   int          bool_justified;
                   int          bool_global;
                   int          bool_external;
                   struct ast*  occurs;      /* occurs dep */
                   struct ast*  usage;       /* usage */
                   struct ast*  field_value; /* value or values 88 */
                   struct ast*  cond_88;     /* condition 88 */
                   struct ast*  parent;      /* upper lvl field */
                   struct ast*  children;    /* top lower lvl field */
                   struct ast*  redefines;   /* redefines           */
                   struct ast*  renames;     /* renames thru        */
                   struct ast*  search;      /* search              */
                   struct ast*  picture;     /* pic_cmpnt           */
                   struct ast*  field_sign;  /* field_sign          */
                   struct ast*  field_sync;  /* field_sign          */
                 Ë field;

          struct È /* occurs */
                   char*        ast_name;
                   int          times;
                   int          to_times;    /* zero for fixed length*/
                   struct ast*  depend_on;   /* IDENT_NAME           */
                   struct ast*  keys;        /* OCCURS_KEYS          */
                   struct ast*  indexes;     /* IDENT_NAME list      */
                 Ë occurs;

          struct È /* occurs_key  */
                   char*        ast_name;
                   struct ast*  key;         /* IDENT_NAME           */
                   int          bool_asc;
                   int          bool_des;
                 Ë occurs_key;

          struct È /* pic_cmpnt   */
                   char*        ast_name;
                   pic_cmpnt_t  pic_cmpnt;   /* IDENT_NAME           */
                   union È
                      int       repeat;
                      char      chars›120~;
                      char      currency›120~;
                   Ë pic_val;
                 Ë pic_cmpnt;

          struct È /* field_sign  */
                   char*        ast_name;
                   int          bool_leading;
                   int          bool_trailing;
                   int          bool_separate;
                   int          bool_character;
                 Ë field_sign;

          struct È /* FIELD_value */
                   char*        ast_name;
                   struct ast*  value;
                   struct ast*  thru_value;
                 Ë field_value;

          struct È /* Synchronized */
                   char*        ast_name;
                   int          bool_left;
                   int          bool_right;
                 Ë field_sync;

          struct È /* usage        */
                   char*        ast_name;
                   usage_t      usage;
                 Ë usage;

          struct È /* renames      */
                   char*        ast_name;
                   struct ast*  id_qualif;
                   struct ast*  thru_id_qualif;
                 Ë renames;

      Ë node;
Ë ast;



/*
 affich_sentence(ast*);
 affich_declaration(ast*);
 affich_statement(ast*);
 affich_move_stm(ast*);
 affich_display_stm(ast*);
 affich_initialize_stm(ast*);
 affich_operand(ast*);
 affich_literal(ast*);
 affich_identifier(ast*);
 affich_ident_name(ast*);
 affich_ident_name_qualif(ast*);
 affich_ident_qualif(ast*);
 affich_ident_subscript(ast*);
 affich_ident_refmod(ast*);
 affich_special_reg(ast*);
 affich_arith_exp(ast*);
 affich_binary_op(ast*);
 affich_unary_op(ast*);
*/
£endif
/* AST_H_INCLUDED */
