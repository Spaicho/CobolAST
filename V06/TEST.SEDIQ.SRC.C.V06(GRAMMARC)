£include <stdio.h>
£include <stdlib.h>
£include <stddef.h>

£include "Grammarh"
£include "Lexerh"
£include "asth"

£define MAX_FP_ARR   12
£define COUNT_OF( arr) (sizeof(arr)/sizeof(0Ýarr~))

ast* global_ret;
context _context=é"","","","","",""è;
context save;
ast* build_literal(int);

                     /****************************/

ast*
get_sentence()
é
    ast* ret=NULL;

    if (ret=sntce())é
      ;
    è
    else return NULL;

 /* if(§equal_type("PROGRAM$"))é
       printf("unexpected token (%s)çn",get_token_val());
       return NULL;
    è */

    return ret;
è

ast*
get_data()
é
    ast* ret=NULL;
    ast* sub_ret=NULL;

    if(ret=data_fields())é
      ;
    è
    else return NULL;

 /* if(§equal_type("PROGRAM$"))é
       printf("unexpected token (%s)çn",get_token_val());
       return NULL;
    è */

    return ret;
è

/*---------------------------------  working storage        ---------*/
int
working_storage_section()é


    if(match_val("WORKING-STORAGE"))é
       ;
    è
    else return 0;

    if(match_val("SECTION"))é
       ;
    è
    else return 0;

    if(match_val("."))é
       ;
    è
    else return 0;

    /* 1-49, 66, 77 et 88 */
    while  (equal_attr("LEVEL NUMBER"))é

           if(data_field())é
              ;
           è
           else return 0;
    è

    printf("Rule recognized: working_storage_section çn");

    return 1;
è

/*---------------------------------  Sentence and Statement ---------*/

ast*
sntce()
é
    ast* ret=NULL;
    ast* stmnt_ret=NULL;

    int nb_statement =  0;
    ast* list_statement = NULL;

    printf("Trying to match rule : sntce çn");

    while((equal_val("MOVE"))         !!
          (equal_val("DISPLAY"))      !!
          (equal_val("INITIALIZE")))é

      if(stmnt_ret=stmnt())é

         nb_statement++;
         list_statement = append_list(list_statement,stmnt_ret);

    /*  (ret->node.sentence.nb_statement)++; */
    /* bug tres bizzare: list_statement->next nest pas null mai egale
       au list_statement, le patch est provisoire eet peux causer
       perte de noeud si append de plusieur noeud a la fois */
    /*  ret->node.sentence.list_statement=append_list
                        (ret->node.sentence.list_statement,stmnt_ret);
    */
      è
      else return NULL;

    è



    /* optional */
    if (equal_val("."))
        consume();

    if (list_statement) é
       ret = make_sentence(nb_statement,list_statement);
       printf("Rule recognized: sntce çn");
       return ret;
    è
    else return NULL;

è

ast*
stmnt()é
    printf("Trying to match rule : stmnt çn");

    ast* ret=NULL;

    if (equal_val("MOVE"))é

       if (ret=move())é
           ;
       è
       else return NULL;

    è
    else if (equal_val("INITIALIZE"))é

       if (ret=intlz())é
           ;
       è
       else return NULL;
    è
    else if(equal_val("DISPLAY"))é

       if (ret=dsply())é
           ;
       è
       else return NULL;
    è
    else return NULL;


    printf("Rule recognized: stmnt çn.");

    return ret;
è

/*--------------------  move, display and initialize Statement ------*/

ast*
move()
é
    printf("Trying to match rule : move çn");
/*
    if (move_2()) é
        ;
    è
    else if (move_1())é
        ;
    è
    else return 0;
*/
    ast* ret=NULL;


    if(match_val("MOVE"))é
        ;
    è
    else return 0;

    if (ret=move_oprnd())é
        ;
    è
    else return 0;

    printf("Rule recognized: move çn");
    return ret;
è

ast*
dsply()
é
    printf("Trying to match rule : dsply çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;

/*  BUILD AST : DISPLAY_STM */
    ret = make_display(0,0,"",0,NULL);


    if(match_val("DISPLAY"))é
        ;
    è
    else return NULL;

    if(sub_ret=ids_litrs())é

        ret->node.display_stm.list_operand=
        append_list(ret->node.display_stm.list_operand,sub_ret);
        /* attention un append peut ajouter plus qu'un seul operand */
        (ret->node.display_stm.nb_operand)++;
    è
    else return NULL;

    /* optional */
    if (equal_val("UPON"))é
       if(dsply_upon())é
           ret->node.display_stm.bool_upon =1;
       è
       else return NULL;
    è

    /* optional */
    if ((equal_val("WITH"))!!(equal_val("NO")))é
       if(dsply_noadv())é
           ret->node.display_stm.bool_no_adv =1;
       è
       else return NULL;
    è

    printf("Rule recognized: dsply çn");

    return ret;
è

ast*
intlz()
é
    printf("Trying to match rule : intlz çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;
    int  bool_rplc=0;


    if(match_val("INITIALIZE"))é
        ;
    è
    else return NULL;

    if(sub_ret=ids())é
        ;
    è
    else return NULL;

    /* optional */
    if (equal_val("REPLACING"))é

       if(intlz_rplc())é
           bool_rplc =1;
       è
       else return NULL;

    è

    ret = make_initialize(bool_rplc,0,sub_ret);

    printf("Rule recognized: intlz çn");

    return ret;
è

/*------------------ initialize body --------------------------------*/

int
intlz_rplc ()
é
    printf("Trying to match rule : intlz_rplc çn");

    if(match_val("REPLACING"))é
        ;
    è
    else return 0;

    if(intlz_rplc_oprnds())é
        ;
    è
    else return 0;

    printf("Rule recognized: intlz_rplc çn");

    return 1;
è

int
intlz_rplc_oprnds()
é
    printf("Trying to match rule : intlz_rplc_oprnds çn");

    int ret = 0;

    while((equal_val("ALPHABETIC"))   !!
          (equal_val("ALPHANUMERIC")) !!
          (equal_val("NUMERIC")))    é

       if(intlz_rplc_oprnd())é
           ;
       è
       else return 0;
       ret = 1;
    è

    if (ret == 1)   printf("Rule recognized: intlz_rplc_oprnds çn");
    return ret;
è

int
intlz_rplc_oprnd()é

    printf("Trying to match rule : intlz_rplc_oprnd çn");

    if(chartype())é
        ;
    è
    else return 0;

    if(match_val("BY"))é
        ;
    è
    else return 0;

    if (id_litr())é
        ;
    è
    else return 0;

    printf("Rule recognized: intlz_rplc_oprnd çn");
    return 1;
è

int
chartype()
é
    printf("Trying to match rule : chartype çn");

    if(match_val("ALPHABETIC"))é
        ;
    è
    else if (match_val("ALPHANUMERIC"))é
        ;
    è
    else if (match_val("NUMERIC"))é
        ;
    è
    else return 0;

    printf("Rule recognized: chartype çn");
    return 1;
è

/*-------------------------- move body ------------------------------*/
/*
int move_1()é

    printf("Trying to match rule : move_1 çn");

    if(match("MOVE"))é
        ;
    è
    else return  0;

    if(id_litr())é
        ;
    è
    else return  0;

    if(match("TO"))é
        ;
    è
    else return  0;

    if(ids())é
        ;
    è
    else return  0;

    printf("Rule recognized: move_1 çn");
    return 1;

è
*/
/* backtracking ? */
/*
int move_2()
é
    printf("Trying to match rule : move_2 çn");

    if(match("MOVE"))é
        ;
    è
    else return  0;

    if(corspnd())é
        ;
    è
    else return  0;

    printf("Rule recognized: move_2 çn");

    return 1;
è
*/
ast*
move_oprnd()é

    printf("Trying to match rule : move_oprnd çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;
    ast* g_oprnd=NULL;
    ast* r_oprnd=NULL;
    int  bool_corresp = 0;


    if((equal_val("CORR")) !!
       (equal_val("CORRESPONDING"))) é
       if(sub_ret=corspnd())é
          bool_corresp = 1;
       è
       else return NULL;

       if(g_oprnd=id())é
          ;
       è
       else return NULL;

       if(match_val("TO"))é
          ;
       è
       else return NULL;

       if(r_oprnd=id())é
          ;
       è
       else return NULL;

    è
    else é

       if(g_oprnd=id_litr())é
          ;
       è
       else return NULL;

       if(match_val("TO"))é
          ;
       è
       else return NULL;

       if(r_oprnd=ids())é
          ;
       è
       else return NULL;
    è

    printf("g_oprnd (%s) r_oprnd (%s) çn",tagValuesÝg_oprnd->tag~,
                                          tagValuesÝr_oprnd->tag~);
    ret=make_move(bool_corresp,0,g_oprnd,r_oprnd);


    /*
    if(id_litr())é
        if(match("TO"))é
            if(ids())é
                ;
            è
            else return  0;
        è
        else return  0;
    è
    else é
        if(corspnd())é
            if(id())é
                if(match("TO"))é
                    if(id())é
                        ;
                    è
                    else return  0;
                è
                else return  0;
            è
            else return  0;
        è
        else return  0;
    è
    */
    printf("Rule recognized: move_oprnd çn");
    return ret;

è

ast*
corspnd()
é
    printf("Trying to match rule : corspnd çn");

    if(match_val("CORRESPONDING"))é
        ;
    è
    else if (match_val("CORR"))é
        ;
    è
    else return  NULL;

    ast* ret = make_ast();

    printf("Rule recognized : corspnd çn");
    return ret;
è

/*--------------------------- display body --------------------------*/

int
dsply_upon()
é
    printf("Trying to match rule : dsply_upon çn");

    if(match_val("UPON"))é
        ;
    è
    else return  0;

    if(dsply_upon_oprnd())é
        ;
    è
    else return  0;

    printf("Rule recognized : dsply_upon çn");

    return 1;
è

int
dsply_noadv()
é
    printf("Trying to match rule : dsply_noadv çn");

    /* optional */
    if (match_val("WITH"))é
        ;
    è

    if (match_val("NO"))é
        ;
    è
    else return  0;

    if (match_val("ADVANCING"))é
        ;
    è
    else return  0;

    printf("Rule recognized : dsply_noadv çn");

    return 1;
è

int
dsply_upon_oprnd()
é
    printf("Trying to match rule : dsply_upon_oprnd çn");

    if(mnemo_or_envir())é
        ;
    è
    else return  0;

    printf("Rule recognized : dsply_upon_oprnd çn");
    return 1;
è

int
mnemo_or_envir()
é
    printf("Trying to match rule : mnemo_or_envir çn");

    if(id_name())é
        ;
    è
    else return  0;

    printf("Rule recognized : mnemo_or_envir çn");
    return 1;
è


/*----------------------  Identifiers and Literals ------------------*/

ast*
ids_litrs()
é
    printf("Trying to match rule : ids_litrs çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    while(sub_ret=id_litr())é

        ret=append_list(ret,sub_ret);
        ;
    è

    if (ret)     printf("Rule recognized: ids_litrs (%d) çn",ret);

    return ret;
è

ast*
id_litr() é

    printf("Trying to match rule : id_litr çn");

    ast* ret=NULL;

    if(equal_type("IDENTIFIER") !! equal_attr("SPECIAL REGISTER"))é

       if (ret=id())é
           ;
       è
       else return NULL;

    è

    else é

       if (ret=litr())é
           ;
       è
       else return NULL;

    è

    printf("Rule recognized: id_litr çn");
    return ret;
è

ast*
ids() é

    printf("Trying to match rule : ids çn");

    ast* ret     =NULL;
    ast* sub_ret =NULL;

    while(equal_type("IDENTIFIER") !! equal_attr("SPECIAL REGISTER"))é
       if(sub_ret=id())é

          ret = append_list(ret,sub_ret);

       è
       else return NULL;
    è

    if (ret)     printf("Rule recognized: ids çn");
    return ret;
è

/*-----------------------  Identifier and Literal -------------------*/

ast*
litr() é

    printf("Trying to match rule : litr çn");

    ast* ret=NULL;


    /* figurative constants */
    if (equal_attr("FIGURATIVE CONST"))é

        if (ret=figurative_constants())é
           ;
        è
        else return NULL;
    è
    else

    /* nonnumeric and numeric literals  */
    if (equal_type("LITERAL"))é

    /*  BUILD AST : LITERAL */
        ret=build_literal(0);
        consume();
    è
    else return  NULL;

    printf("Rule recognized: litr çn");
/*  printf("ret tag (%s)(%d) çn",tagValuesÝret->tag~,ret->tag);
*/  return ret;
è

ast*
figurative_constants() é

    ast* ret=NULL;
    ast* figurative_ret=NULL;

    int bool_all=0;

    printf("Trying to match rule : figurative_constants çn");

    if(equal_val("ALL"))é

       bool_all = 1;
       consume();

    è
       /* QUOTED  est présent ici dans le cas ou ALL est consommé */
    if (equal_attr("QUOTED")       !!
        equal_val ("ZERO")         !!
        equal_val ("ZEROS")        !!
        equal_val ("ZEROES")       !!
        equal_val ("SPACE")        !!
        equal_val ("SPACES")       !!
        equal_val ("HIGH-VALUE")   !!
        equal_val ("HIGH-VALUES")  !!
        equal_val ("LOW-VALUE")    !!
        equal_val ("LOW-VALUES")   !!
        equal_val ("QUOTE")        !!
        equal_val ("QUOTES"))é

       /*  BUILD AST : LITERAL */
       figurative_ret = build_literal(bool_all);
       ret=append_list(ret,figurative_ret);

       consume();

    è
    else return NULL;

    printf("Rule recognized: figurative_constants çn");
    return ret;
è

ast*
id() é

    printf("Trying to match rule : id çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;

    ast* name_ret=NULL;
    ast* qualif_ret=NULL;
    ast* subscr_ret=NULL;
    ast* refmod_ret=NULL;

    if (equal_attr("SPECIAL REGISTER"))é
       if (sub_ret=special_register())é
          ret=append_list(ret,sub_ret);
       è
    è
    else é

       if (sub_ret=id_name())é
           name_ret=append_list(name_ret,sub_ret);
           ;
       è
       else return NULL;

       /* optional */
       if (equal_val("OF"))é
          if (sub_ret=id_qualif())é
              qualif_ret=append_list(qualif_ret,sub_ret);
              ;
          è
          else return  NULL;
       è

       /* optional subscript and refmodifier */
       if (equal_val("("))é

           /* une fois rentré, ca devient obligatoire */
           if (sub_ret=id_subs_refm())é
            printf("id_subs_refm ret->tag (%s) ret->next (%d) çn",
            tagValuesÝsub_ret->tag~,sub_ret->next);

           /* separer les noeuds subs de refm */
              if(sub_ret->tag==IDENT_SUBSCRIPT)é
                 subscr_ret = sub_ret;
                 if (sub_ret->next->tag==IDENT_REFMOD)é
                    refmod_ret = sub_ret->next;
                    subscr_ret->next = NULL;
                 è
              è
              else é
                 if(sub_ret->tag==IDENT_REFMOD)é
                    refmod_ret = sub_ret;
                    if(sub_ret->next) é
                       printf("refmod has a next !çn");
                       exit(EXIT_FAILURE);
                    è
                 è
              è
           è
           else return  NULL;
       è



       ret=make_identifier(0,0,0,name_ret,qualif_ret,subscr_ret,
                                                     refmod_ret);
    è

    printf("Rule recognized: id çn");
    return ret;
è


ast*
special_register() é

    printf("Trying to match rule : special_register çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    int bool_length=0;
    int bool_address=0;

    /* gestion de special register avec OF */
    if ((equal_val("LENGTH")) !! (equal_val("ADDRESS")))é

       if(equal_val("LENGTH"))  bool_length  =1;
       if(equal_val("ADDRESS")) bool_address =1;

       consume();

       if(match_val("OF"))é
          ;
       è
       else return NULL;

       if (sub_ret=id())é

           ret=append_list(ret,sub_ret);
           ret->node.identifier.bool_length =bool_length;
           ret->node.identifier.bool_address=bool_address;

       è
       else return NULL;

    è
    else

       if(equal_attr("SPECIAL REGISTER"))é
          ret=make_identifier(bool_length,bool_address,1,
              make_ident_name(get_token_len(),get_token_val()),
                                              NULL,NULL,NULL);
          consume();
       è
       else return NULL;


    printf("Rule recognized: special_register çn");
    return ret;
è

ast*
id_name_qualif()
é
    ast* ret    =NULL;
    ast* sub_ret=NULL;
    ast* name_ret=NULL;
    ast* qualif_ret=NULL;

/*  ret = make_ident_name_qualif(NULL,NULL); */


    if (name_ret=id_name())é
/*      ret->node.ident_name_qualif.name=sub_ret; */
    è
    else return NULL;

    /* optional */
    if (equal_val("OF"))é
       if (qualif_ret=id_qualif())é
/*        ret->node.ident_name_qualif.qualif=sub_ret; */
          ;
       è
       else return NULL;
    è

    ret=make_identifier(0,0,0,name_ret,qualif_ret,NULL,NULL);

    return ret;

è

ast*
id_names()
é
    ast* ret    =NULL;
    ast* sub_ret=NULL;

    printf("Trying to match rule : id_names çn");

    while(equal_type("IDENTIFIER"))é

        if (sub_ret=id_name())é

           ret=append_list(ret,sub_ret);
        è
        else return NULL;

    è

    if(ret) printf("Rule recognized: id_names çn");

    return ret;
è

ast*
id_name()
é
    printf("Trying to match rule : id_name çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    if (equal_type("IDENTIFIER"))é
        ret=make_ident_name(get_token_len(),get_token_val());
        consume();
    è
    else return NULL;

    printf("Rule recognized: id_name çn");
    return ret;
è

ast*
id_qualif()
é
    printf("Trying to match rule : id_qualif çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;
    ret=make_ident_qualif(NULL);

    while (equal_val("OF"))é
       if(sub_ret=id_qualif_oprnd())é
           ret->node.ident_qualif.list_qualif=
               append_list(ret->node.ident_qualif.list_qualif,sub_ret);
       è
       else return NULL;

    è

    if (ret)     printf("Rule recognized: id_qualif çn");
    return ret;

è

ast*
id_qualif_oprnd ()é

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    printf("Trying to match rule : id_qualif_oprnd çn");

    if (match_val("OF"))é
        ;
    è
    else return NULL;

    if(sub_ret=id_name())é
        ret=append_list(ret,sub_ret);
    è
    else return NULL;

    printf("Rule recognized: id_qualif_oprnd çn");
    return ret;
è
/* continue implementing ast here ... */
ast*
id_subs_refm()é

    ast* ret    =NULL;
    ast* sub_ret=NULL;
    ast* oprnd1 =NULL;

    printf("Trying to match rule : id_subs_refm çn");

    if (match_val("("))é
        ;
    è
    else return NULL;
    /* concatener oprnd 1 avec le reste de subs et refm */
    if(oprnd1=id_oprnd_1_subs_refm())é
        ;
    è
    else return NULL;

    if(sub_ret=id_subs_refm_rest())é
        ;
    è
    else return NULL;

    printf("expecting IDENT_SUBSCRIPT OR REFMOD (%s)çn",
               tagValuesÝsub_ret->tag~);
    if(sub_ret->tag==IDENT_SUBSCRIPT)é

       ast* head = sub_ret->node.ident_subscript.list_subscript;
       oprnd1->next = head;
       sub_ret->node.ident_subscript.list_subscript = oprnd1;
    è
    else if (sub_ret->tag==IDENT_REFMOD)é

       sub_ret->node.ident_refmod.charleft = oprnd1;

    è
    else é

       printf("expected IDENT_SUBSCRIPT OR REFMOD but found (%s)çn",
               tagValuesÝsub_ret->tag~);
    è

    ret=sub_ret;

    /* patch pour enlever length vide */

    if (ret->tag==IDENT_REFMOD)é
       if(ret->node.ident_refmod.length->node.arith_exp.left == NULL)
         ret->node.ident_refmod.length=NULL;
    è

    printf("id_subs_refm ret->tag (%s) ret->next (%d) çn",
            tagValuesÝret->tag~,ret->next);

    printf("Rule recognized : id_subs_refm çn");
    return ret;

è

ast*
id_oprnd_1_subs_refm()é


    ast* ret    =NULL;
    ast* sub_ret=NULL;

    printf("Trying to match rule : id_oprnd_1_subs_refm çn");

    if (sub_ret=arith_expr())é
        ret=append_list(ret,sub_ret);
    è
    else return NULL;

    printf("Rule recognized : id_oprnd_1_subs_refm çn");
    return ret;

è

ast*
id_subs_refm_rest()é

    printf("Trying to match rule : id_subs_refm_rest çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    ast* refmod_ret=NULL;
    ast* subscript_ret=NULL;

    if (equal_val(":"))é
        if (sub_ret=id_refm_rest())é
           /* null pour charleft a remplacer par oprnd 1 */
           refmod_ret=make_ident_refmod(NULL,sub_ret);
           ret=append_list(ret,refmod_ret);
           ;
        è
        else return NULL;
    è
    else if (sub_ret=id_subs_rest())é
             /* 1er subscript absent/coquille: remplacer par oprnd 1 */
             subscript_ret=make_ident_subscript(sub_ret);
             ret=append_list(ret,subscript_ret);

             if (equal_val("("))é
                if (sub_ret=id_refmodif())é
                    /* refmod ast est cree par id_refmodif */
                    ret=append_list(ret,sub_ret);
                    ;
                è
                else return  NULL;
             è

    è

    else return  NULL;

    /* ret = soit refmod sans charleft, soit subscripts avec premier
             subscript coquille si seul ou absent si plusieurs
             puis refmod ou non mais complet (car subscript avant) */

    printf("Rule recognized : id_subs_refm_rest çn");
    printf("id_subs_refm_rest ret (%s) çn",tagValuesÝret->tag~);
    return  ret;

è

ast*
id_refm_rest()
é
    printf("Trying to match rule : id_refm_rest çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;


    if (match_val(":"))é
        ;
    è
    else return  NULL;
    /* length peut etre une arith_exp vide */
    if(sub_ret=refmodif_length())é
        /* arith_exp */
        ret=append_list(ret,sub_ret);
    è
    else return  NULL;

    if (match_val(")"))é
        ;
    è
    else return  NULL;

    printf("Rule recognized : id_refm_rest çn");
    return  ret;

è

ast*
id_subs_rest()
é
    printf("Trying to match rule : id_subs_rest çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    if (match_val(")"))é
        /* creation d'une coquille AST pour le premier subscript */
        ret=make_arith_exp("","","",NULL,NULL);
        ;
    è
    else
    é
        if(sub_ret=subscripts())é

            ret=append_list(ret,sub_ret);

            if (match_val(")"))é
                ;
            è
            else return  NULL;
        è
        else return  NULL;
    è

    printf("Rule recognized : id_subs_rest çn");
    return  ret;

è

ast*
id_subscript()
é
    printf("Trying to match rule : id_subscript çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;


    if (match_val("("))é
        ;
    è
    else return  NULL;

    if(sub_ret=subscripts())é
        ret=append_list(ret,sub_ret);
    è
    else return  NULL;

    if (match_val(")"))é
        ;
    è
    else return  NULL;

    printf("Rule recognized: id_subscript çn");
    return ret;
è

ast*
id_refmodif()
é
    printf("Trying to match rule : id_refmodif çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;


    if (match_val("("))é
        ;
    è
    else return  NULL;

    if(sub_ret=refmodif())é
        ret=append_list(ret,sub_ret);
    è
    else return  NULL;

    if (match_val(")"))é
        ;
    è
    else return  NULL;

    printf("Rule recognized: id_refmodif çn");
    return ret;
è


/*---------------------------  Identifier body ----------------------*/

ast*
subscripts()
é
    printf("Trying to match rule : subscripts çn");


    ast* ret    =NULL;
    ast* sub_ret=NULL;

    while(sub_ret=subscript())é
        ret=append_list(ret,sub_ret);
    è

    if (ret)     printf("Rule recognized: subscripts çn");
    return ret;
è

ast*
subscript()
é
    printf("Trying to match rule : subscript çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    if (sub_ret=arith_expr2())é
        ret=append_list(ret,sub_ret);
    è
    else return  NULL;

    printf("Rule recognized: subscript çn");
    return ret;
è

ast*
refmodif()
é

    ast* ret    =NULL;
    ast* charleftpos_ret=NULL;
    ast* refmodif_length_ret=NULL;

    printf("Trying to match rule : refmodif çn");

    if(charleftpos_ret=charleftpos())é
        ;
    è
    else return  NULL;

    if(match_val(":"))é
        ;
    è
    else return  NULL;

    /* it's optional !! */
    if(refmodif_length_ret=refmodif_length())é
        ;
    è
    else return  NULL;

    ret=make_ident_refmod(charleftpos_ret,refmodif_length_ret);

    printf("Rule recognized: refmodif çn");
    return ret;
è

ast*
charleftpos()
é

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    printf("Trying to match rule : charleftpos çn");

    if (sub_ret=arith_expr())é
        ret=append_list(ret,sub_ret);
    è
    else return  NULL;

    printf("Rule recognized: charleftpos çn");
    return ret;
è

ast*
refmodif_length()
é
    printf("Trying to match rule : refmodif_length çn");

    /*optional */

    ast* ret    =NULL;


    if(§equal_val(")"))é
       if (ret=arith_expr())é
           ;
       è
       else return NULL;
    è
    else é
       ret=make_arith_exp("","","",NULL,NULL);

    è
    printf("Rule recognized: refmodif_length çn");
    return ret;
è


/*-------------------------  Arithmetic expression ------------------*/
/*
int arith_expr_old()
é
    printf("Trying to match rule : arith_expr_old çn");

    if(arith_expr_oprnd())é
        ;
    è
    else return  0;

       optional
    if(arith_expr_oprtn())é
        if(arith_expr())é
            ;
        è
        else return  0;
    è

    printf("Rule recognized: arith_expr_old çn");
    return 1;
è
*/
ast*
arith_expr()
é
    printf("Trying to match rule : arith_expr çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    ast* left   =NULL;
    ast* right  =NULL;
    char operÝ3~="";

    if(left=times_div())é
        /* attention aux variables string */
        ret=make_arith_exp("","","",left,NULL);
        ;
    è
    else return  NULL;

    while((equal_val("+")) !! (equal_val("-")))é

       strcpy(oper,get_token_val());
       strcpy(ret->node.arith_exp.oper,oper);
       strcpy(oper,"");
       consume();

       if(right=times_div())é
          ret->node.arith_exp.right = right;
       è
       else return NULL;

       ret=make_arith_exp("","","",ret,NULL);
    è

    printf("Rule recognized: arith_expr çn");
    return ret;
è

ast*
times_div()
é
    printf("Trying to match rule : times_div çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    ast* left   =NULL;
    ast* right  =NULL;
    char operÝ3~="";


    if(left=power())é
        /* attention aux variables string */
        ret=make_arith_exp("","","",left,NULL);
        ;
    è
    else return  NULL;

    while((equal_val("*")) !! (equal_val("/")))é

       strcpy(oper,get_token_val());
       strcpy(ret->node.arith_exp.oper,oper);
       strcpy(oper,"");
       consume();

       if(right=power())é
          ret->node.arith_exp.right = right;
       è
       else return NULL;

       ret=make_arith_exp("","","",ret,NULL);

    è

    printf("Rule recognized: times_div çn");
    return ret;
è

ast*
power()
é
    printf("Trying to match rule : power çn");

    ast* ret    =NULL;
    ast* sub_ret=NULL;

    ast* left   =NULL;
    ast* right  =NULL;
    char operÝ3~="";
    char signÝ3~="";

    if ((equal_val("+")))é

       strcpy(sign,get_token_val());
       consume();
    è
    else if((equal_val("-")))é

       strcpy(sign,get_token_val());
       consume();
    è

    if(left=basis())é
        /* attention aux variables string */
        ret=make_arith_exp("","",sign,left,NULL);
        strcpy(sign,"");
    è
    else return  NULL;

    while((equal_val("**")))é

       strcpy(oper,get_token_val());
       strcpy(ret->node.arith_exp.oper,oper);
       strcpy(oper,"");

       consume();

       if(right=basis())é
          ret->node.arith_exp.right = right;
       è
       else return NULL;

       ret=make_arith_exp("","","",ret,NULL);

    è

    /* ret est unaire (left seulement) */

    printf("Rule recognized: power çn");
    return ret;
è

ast*
basis()
é
    printf("Trying to match rule : basis çn");


    ast* ret    =NULL;
    ast* sub_ret=NULL;

    if ((equal_type("IDENTIFIER"))!!(equal_attr("SPECIAL REGISTER")))é

       if (sub_ret=id())é
          ret=append_list(ret,sub_ret);
       è
       else return NULL;
    è
    else if((equal_val("(")))é

            /* bug de caca ! ne pas oublier de consommer le ( */
            consume();

            if (sub_ret=arith_expr())é
               ret=append_list(ret,sub_ret);
            è
            else return NULL;

            if (match_val(")"))é
               ;
            è
            else return NULL;
         è
            /* ZERO/ZEROS/ZEROS inclut */
    else if (equal_attr("NUMERIC"))é

            if(equal_type("LITERAL"))é

               if (sub_ret=litr())é
                  ret=append_list(ret,sub_ret);
               è
               else return NULL;
            è
            else /* KEYWORD (ZERO/ZEROS/ZEROS) */
            é
               sub_ret=build_literal(0);
               consume();
            è

         è

    else return NULL;

    printf("Rule recognized: basis çn");
    return ret;
è

ast*
arith_expr2()
é
    printf("Trying to match rule : arith_expr2 çn");

    ast*  ret    =NULL;
    ast*  sub_ret=NULL;

    ast*  left   =NULL;
    ast*  right  =NULL;
    char* oper   =NULL;

    if((equal_attr("INTEGER"))&&(equal_attr("UNSIGNED")))é

        left=build_literal(0);
        consume();

    è
    else if(sub_ret=id_name_qualif())é
            /* id_name_qualif retourn désormais un identifier */
            left=make_identifier(0,0,0,
                 sub_ret->node.ident_name_qualif.name,
                 sub_ret->node.ident_name_qualif.qualif,NULL,NULL);


            /* optional */
            if((equal_val("+"))!!(equal_val("-"))) é

               strcpy(oper,get_token_val());
               strcpy(ret->node.arith_exp.oper,oper);
               strcpy(oper,"");
               consume();

               if((equal_attr("INTEGER"))&&(equal_attr("UNSIGNED")))é

                  right=build_literal(0);
                  consume();

               è
               else return  NULL;
            è

         è
    else return NULL;

    ret = make_arith_exp("",oper,"",left,right);

    printf("Rule recognized: arith_expr2 çn");
    return ret;
è
/*
int arith_expr2_old()
é
    printf("Trying to match rule : arith_expr2_old çn");

    if(arith_expr_oprnd())é
        ;
    è
    else return  0;

       optional
    if(arith_expr_oprtn())é
        if(arith_expr_oprnd())é
            ;
        è
        else return  0;
    è

    printf("Rule recognized: arith_expr2_old çn");
    return 1;
è

int arith_expr_oprnd()
é
    printf("Trying to match rule : arith_expr_oprnd çn");

    if (match("INTEGER"))é
        ;
    è
    else if (id_name_qualif())é
        ;
    è
    else return  0;

    printf("Rule recognized: arith_expr_oprnd çn");
    return 1;
è

int arith_expr_oprtn()
é
    printf("Trying to match rule : arith_expr_oprtn çn");

    if (match("+"))é
        ;
    è
    else if (match("-"))é
        ;
    è
    else if (match("*"))é
        ;
    è
    else return  0;

    printf("Rule recognized: arith_expr_oprtn çn");
    return 1;
è
*/
/*---------------------- Data declaration    ------------------------*/
ast*
data_fields()é

    printf("Trying to match rule : data_fields çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;

    while(sub_ret=data_field()) é
       ret=append_list(ret,sub_ret);
    è

    if(ret) printf("Rule recognized: data_fields çn");

    return ret;

è

ast*
data_field()é

    printf("Trying to match rule : data_field çn");

    ast* ret=NULL;
    ast* name_ret=NULL;
    ast* sub_ret=NULL;

    field_name field_name;
    field_lvl  field_lvl;
    int  lvl=0;
    char** ptr=NULL;

    if  (equal_attr("LEVEL NUMBER")&&
        §equal_val ("66")          &&
        §equal_val ("88")          )é

         if (get_token_val()=="77") é
            field_lvl=LVL_77;
         è else é
            field_lvl=LVL_49;
         è
         lvl=strtol(get_token_val(),ptr,10);
         consume();

        if (equal_type("IDENTIFIER"))é

           if (name_ret=id_name())é
              ;
           è
           else return NULL;
        è
        else if (equal_val("FILLER"))é

                name_ret=make_ident_name(get_token_len(),
                                         get_token_val());
                field_name=FILLER;
                consume();
             è
             else é
                name_ret=make_ident_name(0,"");
                field_name=SPACE;
             è

        if (ret=data_desc())é
           ;
        è
        else return NULL;

        if (match_val("."))é
           ;
        è
        else return NULL;

    è
    else if (equal_attr("LEVEL NUMBER")&&
             equal_val ("66")          )é

             field_lvl =LVL_66;
             lvl=strtol(get_token_val(),ptr,10);
             consume();

        if (name_ret=id_name())é
           ;
        è
        else return NULL;

        if (ret=renames_cl())é
           ;
        è
        else return NULL;

        if (match_val("."))é
           ;
        è
        else return NULL;

    è
    else if (equal_attr("LEVEL NUMBER")&&
             equal_val ("88")          )é

             field_lvl =LVL_88;
             lvl=strtol(get_token_val(),ptr,10);
             consume();

        if (name_ret=cond_name())é
           ;
        è
        else return NULL;

        if (ret=cond_val_cl())é
           ;
        è
        else return NULL;

        if (match_val("."))é
           ;
        è
        else return NULL;

    è
    else return NULL;

    ret=update_field_init(ret,name_ret,field_name,field_lvl,lvl);


    printf("Rule recognized: data_field çn");
    return ret;

è
/*---------------------- Declaration  body   ------------------------*/

ast*
cond_name()
é
    printf("Trying to match rule : cond_name çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;
    /*
    if (match_type("IDENTIFIER"))é
        ;
    è
    else return NULL;
    */

    if(ret=id_name())é

    è
    else return NULL;

    printf("Rule recognized: cond_name çn");
    return ret;
è

/*------*/

ast*
data_desc()
é
    printf("Trying to match rule : data_desc çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;
    ast* redefines_ret=NULL;


    /* Not all clauses are compatible with each other */
    /* Semantic for further analysis and elimination */


    /* add permutation */
    /* Union for all the clause to permute */
    /* an array of function pointer        */
    /* a while loop                        */
    /* if a clause is found                */
    /* take it off from the array          */

    /* Known bug : normalement global peut venir avant redefines */
    /* Mais pour nous redefines doit obligatoirement etre en premier */

    if (equal_val("REDEFINES"))é

       if (redefines_ret=data_redefines_cl())é
          ;
       è
       else return NULL;
    è

    /* Array of clauses to permute      */
    fp_t_nod *clauses;
    clauses = alim_clauses();
    /* print_clauses(clauses); */

    fp_t_nod *iterator= clauses;
    /*
     printf("Permutation loop start ... çn list head (%d)çn",iterator);
    */

    ret = make_field(NULL, NULL, UNKNOWN_FIELD_NAME, UNKNOWN_FIELD_LVL,
                     0, 0, 0, 0, 0, 0, 0, 0, 0,
                     NULL, NULL, NULL, NULL, NULL, NULL,
                     redefines_ret, NULL, NULL, NULL, NULL, NULL);

    while (iterator §= NULL)é

       /*printf("Permutation loop .iterator (%d)çn",iterator);*/
       /* Known bug : 'IS' is accepted before each clause !! */
       /* if should be for external et gloabal only          */
       /* A deleguer a l'analyse semantique                  */
       if (equal_val("IS"))é

          consume();

       è

       /* if lookahead match    */
       if (tkn_in_array(iterator->val.cond_1))é
          /* invoquer la function pointer */
          if (sub_ret=iterator->val.fp())é
             printf("Function pointer (%d) invoked after cond çn",
                                                iterator->val.id);
             update_field(ret,sub_ret,iterator->val.tag);
          è
          else return NULL;

          /* Reduire la ligne de la liste chainée */
          clauses = delete_clauses(clauses,iterator);
          /* Repointer vers la tete de la chaine */
          iterator = clauses;
       è
       else
       é
          /* pointer vers le noeud suivant */
          iterator = iterator->next;

       è
    è

    /* Not implemented clause : Like */
    /* Not implemented clause : Typedef */

    /* Not implemented clause : Type    */

    printf("Rule recognized: data_desc çn");
    return ret;
è

/*--------------------- Data declaration functions ------------------*/

ast*
data_redefines_cl()é

    printf("Trying to match rule : data_redefines_cl çn");

    ast* ret=NULL;

    if (match_val("REDEFINES"))é
       ;
    è
    else return NULL;

    if (ret=id_name())é
       ;
    è
    else return NULL;

    printf("Rule recognized: data_redefines_cl çn");
    return ret;
è

/*------*/

ast*
data_external_cl()é

    printf("Trying to match rule : data_external_cl  çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;

    if (match_val("EXTERNAL"))é
       ret=make_ast();
    è
    else return NULL;


    printf("Rule recognized: data_external_cl  çn");
    return ret;
è

/*------*/

ast*
data_blankzero_cl()é

    printf("Trying to match rule : data_blankzero_cl çn");

    ast* ret=NULL;


    if (match_val("BLANK"))é
       ;
    è
    else return NULL;

    if (equal_val("WHEN"))é

       consume();

    è

    if (match_val("ZERO"))é
       ;
    è
    else return NULL;

    ret=make_ast();

    printf("Rule recognized: data_blankzero_cl çn");
    return ret;
è

/*------*/

ast*
data_global_cl()é

    printf("Trying to match rule : data_global_cl çn");

    ast* ret=NULL;

    if (match_val("GLOBAL"))é
       ;
    è
    else return NULL;

    ret=make_ast();

    printf("Rule recognized: data_global_cl çn");
    return ret;
è

/*------*/

ast*
data_just_cl()é

    printf("Trying to match rule : data_just_cl çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;


    if ((equal_val("JUST"))!!(equal_val("JUSTIFIED")))é

       consume();

    è else return NULL; /* ajouté au cours de ast */

    if ((equal_val("RIGHT")))é

       consume();

    è

    ret = make_ast();

    printf("Rule recognized: data_just_cl çn");
    return ret;
è

/*------*/

ast*
data_occurs_cl()é

    printf("Trying to match rule : data_occurs_cl çn");

    ast* ret       =NULL;
    ast* sub_ret   =NULL;

    int  times     =0;
    char** ptr     =NULL;
    int  to_times  =0;
    ast* depend_on =NULL;
    ast* keys      =NULL;
    ast* indexes   =NULL;


    if (match_val("OCCURS"))é
       ;
    è
    else return NULL;

    if ((equal_attr("INTEGER"))!!(equal_attr("UNSIGNED")))é

       times = strtol(get_token_val(),ptr,10);
       printf("occurs times (%d)çn",times);
       consume();
    è
    else return NULL;

    /* Format 2 */
    if ((equal_val("TO")))é

        consume();

        if ((equal_attr("INTEGER"))!!(equal_attr("UNSIGNED")))é

           to_times = strtol(get_token_val(),ptr,10);
           printf("occurs to_times (%d)çn",to_times);
           consume();
        è
        else return NULL;

        if ((equal_val("TIMES")))é

           consume();
        è

        if (match_val("DEPENDING"))é
           ;
        è
        else return NULL;

        if ((equal_val("ON")))é

           consume();
        è

        if (depend_on=id_name())é
           ;
        è
        else return NULL;

        /* Key-indexed-by phrase */

        if ((equal_val("ASCENDING")) !!
            (equal_val("DESCENDING")) )é

            if (keys=data_index_key_cls())é
               ;
            è
            else return NULL;
        è

        if ((equal_val("INDEX")))é

            if (indexes=data_index_by_cl())é
               ;
            è
            else return NULL;
        è

    è

    /* Format 1 */

    else é

        if ((equal_val("TIMES")))é

           consume();
        è

        /* Key-indexed-by phrase */

        if ((equal_val("ASCENDING")) !!
            (equal_val("DESCENDING")) )é

            if (keys=data_index_key_cls())é
               ;
            è
            else return NULL;
        è

        if ((equal_val("INDEX")))é

            if (indexes=data_index_by_cl())é
               ;
            è
            else return NULL;
        è

    è

    ret=make_occurs(times,to_times,depend_on,keys,indexes);

    printf("Rule recognized: data_occurs_cl çn");
    return ret;
è

ast* data_index_key_cls()é

    printf("Trying to match rule : data_index_key_cls çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;
    int  bool_asc =0;
    int  bool_des =0;

    while ((equal_val("ASCENDING")) !!
           (equal_val("DESCENDING")))é

        if (equal_val("ASCENDING"))  bool_asc = 1;
        else                         bool_des = 1;

        if (sub_ret=data_index_key_cl())é /* names */
           ret=append_list(ret,
                           make_occurs_key(bool_asc,bool_des,sub_ret));
           bool_asc =0;
           bool_des =0;
        è
        else return NULL;

    è

    if(ret) printf("Rule recognized: data_index_key_cls çn");

    return ret; /* occurs_key */
è

ast*
data_index_key_cl()é

    printf("Trying to match rule : data_index_key_cl çn");

    ast* ret=NULL;

    if ((equal_val("ASCENDING")) !!
        (equal_val("DESCENDING")) )é

       consume();

       if ((equal_val("KEY")))é

          consume();
       è

       if ((equal_val("IS")))é

          consume();
       è

       if (ret=id_names())é
          ;
       è
       else return NULL;

    è
    else return NULL;

    printf("Rule recognized: data_index_key_cl çn");
    return ret;
è

ast*
data_index_by_cl()é

    printf("Trying to match rule : data_index_by_cl çn");

    ast* ret=NULL;

    if (match_val("INDEX"))é
       ;
    è
    else return NULL;

    if ((equal_val("BY")))é

       consume();
    è

    if (ret=id_names())é
       ;
    è
    else return NULL;


    printf("Rule recognized: data_index_by_cl çn");
    return ret;
è

/*------*/

ast*
data_pic_cl()é

    printf("Trying to match rule : data_pic_cl çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;


    if(equal_val("PIC")!!equal_val("PICTURE"))é
       save = set_context("data_pic_chars");
       consume();
       ;
    è
    else return NULL;

    if (ret=data_pic_str())é
       ;
    è
    else return NULL;

    /* restore_context(save);*/


    if (equal_val("SIZE"))é /* ?? */
       if (sub_ret=data_pic_size_local())é
          ;
       è
       else return NULL;
    è


    /* consommer Space qui vient apres la fin de pic str  (??) */
    if (equal_type("SPACE"))é

       consume();
    è


    printf("Rule recognized: data_pic_cl çn");
    return ret;
è


ast*
data_pic_str()é

    printf("Trying to match rule : data_pic_str çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;

    if (equal_val("IS"))é

       consume();
    è

    /* Lexer/Parser Hack */
    /* pour ne pas accepter espace apres repeat : */
    /* PIC 9(9) V                                 */
    /* on consomme le premier espace apres pic et IS */
    /* et puis enlever les espaces de token picchar  */

    /* Space */

    if (match_type("SPACE"))é
       ;
    è
    else return NULL;

    /* Currency */
    if (equal_val("$"))é
       sub_ret=make_pic_cmpnt(PIC_CURRENCY,0,"",get_token_val());
       ret=append_list(ret,sub_ret);
       consume();

    è

    while (equal_type("PICCHARS"))é

   /*  set_context("data_pic_chars");
   */
       /* PicChars */
       if (sub_ret=data_pic_chars())é
          ret=append_list(ret,sub_ret);
       è
       else return NULL;

   /*  restore_context(save);
   */
       /* Repeat */
       if (equal_val("("))é

          if (sub_ret=data_pic_repeat())é
             ret=append_list(ret,sub_ret);
          è
          else return NULL;

       è
    è


    printf("Rule recognized: data_pic_str çn");
    return ret;
è

/****/

ast*
data_pic_chars()é

    printf("Trying to match rule : data_pic_chars çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;
    char charsÝ120~;


    if (equal_type("PICCHARS"))é
       /* si dernier char de picchar est un point alors */
       /* exiger un point avant la fin de la ligne */
       strcpy(chars,get_token_val());
       consume();
    è
    else
    é
       return NULL;
    è

    ret=make_pic_cmpnt(PIC_CHARS,0,chars,"");
    strcpy(chars,"");

    printf("Rule recognized: data_pic_chars çn");

    return ret;
è

ast*
data_pic_repeat()é

    printf("Trying to match rule : data_pic_repeat çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;
    int  repeat=0;
    char** ptr=NULL;


    if (match_val("("))é
       ;
    è
    else return NULL;

    if ((equal_attr("UNSIGNED"))&&(equal_attr("INTEGER")))é
       repeat=strtol(get_token_val(),ptr,10);
       consume();
    è
    else return NULL;

    if (equal_val(")"))é
       set_context("data_pic_chars");
       consume();
    è
    else return NULL;

    /* picchar hack */
    if (§equal_type("PICCHARS"))é
       erase_context();
       if(equal_type("SPACE"))é
          consume();
       è
    è

    ret=make_pic_cmpnt(PIC_REPEAT,repeat,"","");

    printf("Rule recognized: data_pic_repeat çn");
    return ret;
è


ast*
data_pic_size_local()é

    printf("Trying to match rule : data_pic_size_local çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;


    if (match_val("SIZE"))é
       ;
    è
    else return NULL;

    if (equal_val("IS"))é

       consume();

    è

    if (match_attr("INTEGER"))é
       ;
    è
    else return NULL;

    if (match_val("LOCALE"))é
       ;
    è
    else return NULL;

    if (equal_val("IS"))é

       consume();

       if (mnemo_or_envir())é
          ;
       è
       else return NULL;
    è

    else é
       if (equal_type("IDENTIFIER"))é
          if (mnemo_or_envir())é
             ;
          è
          else return NULL;
       è
    è
    /* clause size and local n'est pas exmploité */
    ret=make_ast();

    printf("Rule recognized: data_pic_size_local çn");
    return ret;
è

/*------*/

ast*
data_sign_cl()é

    printf("Trying to match rule : data_sign_cl çn");

    ast* ret=NULL;
    int  bool_leading=0;
    int  bool_trailing=0;
    int  bool_separate=0;
    int  bool_character=0;

    if (equal_val("SIGN"))é
       consume();

       if (equal_val("IS"))é

          consume();
       è
    è

    if (equal_val("LEADING"))é
       bool_leading=1;
       consume();

    è
    else if(equal_val("TRAILING"))é
             bool_trailing=1;
             consume();
         è

    else return NULL;

    if (equal_val("SEPARATE"))é
       bool_separate=1;
       consume();

       if (equal_val("CHARACTER"))é
          bool_character=1;
          consume();
       è
    è

    ret=make_field_sign(bool_leading,bool_trailing,bool_separate,
                                                   bool_character);
    printf("Rule recognized: data_sign_cl çn");
    return ret;
è

/*------*/

ast*
data_value_cl()é

    printf("Trying to match rule : data_value_cl çn");

    ast* ret=NULL;
    ast* sub_ret=NULL;


    if (match_val("VALUE"))é
       ;
    è
    else return NULL;

    if (equal_val("IS"))é

       consume();

    è

    if (sub_ret=litr())é
       ;
    è
    else return NULL;

    ret=make_field_value(sub_ret,NULL);

    printf("Rule recognized: data_value_cl çn");
    return ret;
è

/*------*/

ast*
data_sync_cl()é

    printf("Trying to match rule : data_sync_cl çn");

    ast* ret=NULL;
    int  bool_right=0;
    int  bool_left=0;

    if ((equal_val("SYNC"))) é

       consume();

    è
    else if (equal_val("SYNCHRONIZED"))é

       consume();
    è
    else return NULL;

    if ((equal_val("LEFT"))) é
       bool_left=1;
       consume();
    è
    else if (equal_val("RIGHT")) é
       bool_right=1;
       consume();

    è

    ret=make_field_sync(bool_right,bool_left);

    printf("Rule recognized: data_sync_cl çn");
    return ret;
è

/*------*/

ast*
data_usage_cl()é

    printf("Trying to match rule : data_usage_cl çn");

    ast* ret=NULL;
    usage_t usage;

    if (equal_val("USAGE"))é

       consume();

       if (equal_val("IS"))é

          consume();

       è

    è

    if (equal_val("BINARY"))é
        usage=BINARY;
        consume();


    è else if (equal_val("COMPUTATIONAL"))é
        usage=COMPUTATIONAL;
        consume();

    è else if (equal_val("COMP"))é
        usage=COMP;
        consume();

    è else if (equal_val("COMPUTATIONAL-1"))é
        usage=COMPUTATIONAL_1;
        consume();

    è else if (equal_val("COMP-1"))é
        usage=COMP_1;
        consume();

    è else if (equal_val("COMPUTATIONAL-2"))é
        usage=COMPUTATIONAL_2;
        consume();

    è else if (equal_val("COMP-2"))é
        usage=COMP_2;
        consume();

    è else if (equal_val("COMPUTATIONAL-3"))é
        usage=COMPUTATIONAL_3;
        consume();

    è else if (equal_val("COMP-3"))é
        usage=COMP_3;
        consume();

    è else if (equal_val("COMPUTATIONAL-4"))é
        usage=COMPUTATIONAL_4;
        consume();

    è else if (equal_val("COMP-4"))é
        usage=COMP_4;
        consume();

    è else if (equal_val("DISPLAY"))é
        usage=DISPLAY;
        consume();

    è else if (equal_val("DISPLAY-1"))é
        usage=DISPLAY_1;
        consume();

    è else if (equal_val("INDEX"))é
        usage=INDEX;
        consume();

    è else if (equal_val("PACKED-DECIMAL"))é
        usage=PACKED_DECIMAL;
        consume();

    è else if (equal_val("POINTER"))é
        usage=POINTER;
        consume();

    è else if (equal_val("PROCEDURE-POINTER"))é
        usage=PROCEDURE_POINTER;
        consume();

    è else return NULL;

    ret=make_usage(usage);

    printf("Rule recognized: data_usage_cl çn");
    return ret;
è
/*---------------------- renames and conditional function -----------*/

ast*
renames_cl()
é
    printf("Trying to match rule : renames_cl çn");

    ast* ret=NULL;
    ast* renames_ret=NULL;
    ast* id_qualif_ret=NULL;
    ast* thru_id_qualif_ret=NULL;

    if (match_val("RENAMES"))é
        ;
    è
    else return NULL;

    if (id_qualif_ret=id_name_qualif())é
        ;
    è
    else return NULL;

    if ((equal_val("THROUGH")) !!
        (equal_val("THRU")) )é

       consume();

       if (thru_id_qualif_ret=id_name_qualif())é
           ;
       è
       else return NULL;

    è

    renames_ret=make_renames(id_qualif_ret,thru_id_qualif_ret);
    ret=make_field(NULL, NULL, UNKNOWN_FIELD_NAME, UNKNOWN_FIELD_LVL,
                   0, 0, 0, 0, 0, 0, 0, 0, 0,
                   NULL, NULL, NULL, NULL, NULL, NULL,
                   NULL, renames_ret , NULL,NULL, NULL, NULL);

    printf("Rule recognized: renames_cl çn");
    return ret;
è

ast*
cond_val_cl()
é
    printf("Trying to match rule : cond_val_cl çn");

    ast* ret=NULL;
    ast* field_value_ret=NULL;
    ast* sub_ret=NULL;
    ast* value_ret=NULL;
    ast* thru_value_ret=NULL;

    if      (match_val("VALUE"))é
         if (match_val("IS"))é
            ;
         è
    è
    else if (match_val("VALUES"))é
         if (match_val("ARE"))é
            ;
         è
    è
    else return NULL;

    while (value_ret=litr())é

       if ((equal_val("THROUGH")) !!
           (equal_val("THRU")) )é

           consume();

          if (thru_value_ret=litr())é
              ;
          è
          else return NULL;
       è
       sub_ret=make_field_value(value_ret,thru_value_ret);
   /*  value_ret=NULL;
       thru_value_ret=NULL; */
       field_value_ret=append_list(field_value_ret,sub_ret);
    è

    ret=make_field(NULL, NULL, UNKNOWN_FIELD_NAME, UNKNOWN_FIELD_LVL,
                   0, 0, 0, 0, 0, 0, 0, 0, 0,
                   NULL, NULL, field_value_ret, NULL, NULL, NULL,
                   NULL, NULL, NULL,NULL, NULL, NULL);


    printf("Rule recognized: cond_val_cl çn");
    return ret;
è

/*---------------------- Context function    ------------------------*/

int
affich_context()é

   printf("çn");
   printf("context.division : <%s>çn", _context.division);
   printf("context.section  : <%s>çn", _context.section );
   printf("context.sentence : <%s>çn", _context.sentence);
   printf("context.clause   : <%s>çn", _context.clause  );
   printf("context.keyword  : <%s>çn", _context.keyword );
   printf("context.other    : <%s>çn", _context.other   );
   printf("çn");

   return 1;
è

context
set_context(char* clause)é

    context save;

    if(strcmp("data_pic_chars",clause)==0)é

       save = _context;
       _context.division ="DATA";
       _context.section  ="";
       _context.clause   ="data_pic_chars";
       _context.keyword  ="PIC";
       _context.other    ="";

    è

    affich_context();

    return  save;

è

int
restore_context(context save)é

    _context = save;

    affich_context();

    return  1;

è

/*---------------------- Functions for permutation -----------------*/
fp_t_nod*
alim_clauses()é

    /*printf("alim_clauses : Start çn"); */

    fp_t clauses_arrÝMAX_FP_ARR~;
    fp_t_nod* head;

    int i=0;

    fp_t_nod* node;
    node  = malloc (sizeof (fp_t_nod));

    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 1;
    clauses_arrÝi~.tag= CL_EXTERNAL;
    clauses_arrÝi~.fp = data_external_cl;
    clauses_arrÝi~.cond_1.arrÝ0~ = "EXTERNAL";
  /*printf("alim_clauses : alimentation of cond_1 çn");
  */clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : Succesful insertion of clause  1 çn");
  *//**/
    node->val      = clauses_arrÝi~;
    node->next     = malloc (sizeof (fp_t_nod));
    head           = node;
    node           = node->next;
    /**/
    i++;

    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 2;
    clauses_arrÝi~.tag= CL_BLANK_WHEN_ZERO;
    clauses_arrÝi~.fp = data_blankzero_cl;
    clauses_arrÝi~.cond_1.arrÝ0~ = "BLANK";
  /*printf("alim_clauses : alimentation of cond_1 çn");
  */clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : Succesful insertion of clause  2 çn");
  *//**/
    node->val      = clauses_arrÝi~;
    node->next     = malloc (sizeof (fp_t_nod));
    node           = node->next;
    /**/
    i++;

    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 3;
    clauses_arrÝi~.tag= CL_GLOBAL;
    clauses_arrÝi~.fp = data_global_cl;
    clauses_arrÝi~.cond_1.arrÝ0~ = "GLOBAL";
  /*printf("alim_clauses : alimentation of cond_1 çn");
  */clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : Succesful insertion of clause  3 çn");
    /**/
    node->val      = clauses_arrÝi~;
    node->next     = malloc (sizeof (fp_t_nod));
    node           = node->next;
    /**/
    i++;

    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 4;
    clauses_arrÝi~.tag= CL_JUSTIFIED;
    clauses_arrÝi~.fp = data_just_cl;
    clauses_arrÝi~.cond_1.arrÝ0~ = "JUST";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ1~ = "JUSTIFIED";
    clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : alimentation of cond_1 çn");
    printf("alim_clauses : Succesful insertion of clause  4 çn");
  *//**/
    node->val      = clauses_arrÝi~;
    node->next     = malloc (sizeof (fp_t_nod));
    node           = node->next;
    /**/
    i++;

    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 5;
    clauses_arrÝi~.tag= CL_OCCURS;
    clauses_arrÝi~.fp = data_occurs_cl;
    clauses_arrÝi~.cond_1.arrÝ0~ = "OCCURS";
  /*printf("alim_clauses : alimentation of cond_1 çn");
  */clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : Succesful insertion of clause  5 çn");
  *//**/
    node->val      = clauses_arrÝi~;
    node->next     = malloc (sizeof (fp_t_nod));
    node           = node->next;
    /**/
    i++;


    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 6;
    clauses_arrÝi~.tag= CL_PICTURE;
    clauses_arrÝi~.fp = data_pic_cl;
    clauses_arrÝi~.cond_1.arrÝ0~ = "PIC";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ1~ = "PICTURE";
    clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : alimentation of cond_1 çn");
    printf("alim_clauses : Succesful insertion of clause  6 çn");
  *//**/
    node->val      = clauses_arrÝi~;
    node->next     = malloc (sizeof (fp_t_nod));
    node           = node->next;
    /**/
    i++;

    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 7;
    clauses_arrÝi~.tag= CL_SIGN;
    clauses_arrÝi~.fp = data_sign_cl;
    clauses_arrÝi~.cond_1.arrÝ0~ = "SIGN";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ1~ = "LEADING";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ2~ = "TRAILING";
    clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : alimentation of cond_1 çn");
    printf("alim_clauses : Succesful insertion of clause  7 çn");
  *//**/
    node->val      = clauses_arrÝi~;
    node->next     = malloc (sizeof (fp_t_nod));
    node           = node->next;
    /**/
    i++;

    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 8;
    clauses_arrÝi~.tag= CL_VALUE;
    clauses_arrÝi~.fp = data_value_cl;
    clauses_arrÝi~.cond_1.arrÝ0~ = "VALUE";
    clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : alimentation of cond_1 çn");
    printf("alim_clauses : Succesful insertion of clause  8 çn");
  *//**/
    node->val      = clauses_arrÝi~;
    node->next     = malloc (sizeof (fp_t_nod));
    node           = node->next;
    /**/
    i++;

    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 9;
    clauses_arrÝi~.tag= CL_SYNCHRONIZED;
    clauses_arrÝi~.fp = data_sync_cl;
    clauses_arrÝi~.cond_1.arrÝ0~ = "SYNC";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ1~ = "SYNCHRONIZED";
    clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : alimentation of cond_1 çn");
    printf("alim_clauses : Succesful insertion of clause  9 çn");
  *//**/
    node->val      = clauses_arrÝi~;
    node->next     = malloc (sizeof (fp_t_nod));
    node           = node->next;
    /**/
    i++;

    clauses_arrÝi~.cond_1.len =0;
    clauses_arrÝi~.cond_2.len =0;
    clauses_arrÝi~.cond_1.arrÝ0~ = "";
    clauses_arrÝi~.cond_2.arrÝ0~ = "";

    clauses_arrÝi~.id = 10;
    clauses_arrÝi~.tag= CL_USAGE;
    clauses_arrÝi~.fp = data_usage_cl;
    clauses_arrÝi~.cond_1.arrÝ0~  = "USAGE";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ1~  = "BINARY";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ2~  = "COMPUTATIONAL";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ3~  = "COMP";;
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ4~  = "COMPUTATIONAL-1";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ5~  = "COMP-1";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ6~  = "COMPUTATIONAL-2";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ7~  = "COMP-2";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ8~  = "COMPUTATIONAL-3";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ9~  = "COMP-3";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ10~ = "COMPUTATIONAL-4";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ11~ = "COMP-4";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ12~ = "DISPLAY";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ13~ = "DISPLAY-1";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ14~ = "INDEX";;
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ15~ = "PACKED-DECIMAL";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ16~ = "POINTER";
    clauses_arrÝi~.cond_1.len++;
    clauses_arrÝi~.cond_1.arrÝ17~ = "PROCEDURE-POINTER";
    clauses_arrÝi~.cond_1.len++;
  /*printf("alim_clauses : alimentation of cond_1 çn");
    printf("alim_clauses : Succesful insertion of clause 10 çn");
  *//**/
    node->val      = clauses_arrÝi~;
    node->next     = NULL;
    /**/
    i++;

    /*--------------------------------------------------*/
    /*                                                  */
    /*--------------------------------------------------*/
    /*
    printf("Start for linked list building from array ...(%d)çn",i);

    fp_t_nod* temp;

    fp_t_nod* node = malloc (sizeof (fp_t_nod));
    node->val      = clauses_arrÝ0~;
    clauses = node;

    temp = clauses->next;

    for(j=1;j<i;j++)é

       printf("iteration (%d) çn",j+1);
       if (temp == NULL) é
          temp = malloc (sizeof (fp_t_nod));
          printf("malloc done çn");
       è

       temp->val  = clauses_arrÝj~;
       temp->next = NULL;

       clause_print(temp->val,"temp->val");


       clause_nod_print(temp,"temp->val");
       temp = temp->next;

       printf("Creation done çn");

    è
    */
    return head;

è
/*
int alim_clause_arr(fp_t_arr clauses)é

    printf("alim_clause_arr : Start çn");

    int i=0;
    int j=0;

    if (clause_arr == NULL) é
       clause_arr = malloc(MAX_FUNCTIONS*sizeof(fp_t));
       printf("alim_clause_arr : allocation of MAX_FUNCTIONS size çn");
       for(i=0;i<MAX_FUNCTIONS;i++)é
          (clause_arr+i)->cond_1 = malloc(MAX_COND*sizeof(char*));
          (clause_arr+i)->cond_2 = malloc(MAX_COND*sizeof(char*));
       è
    è
    printf("alim_clause_arr : allocation of MAX_COND size çn");
    printf("sizeof(clause_arr) malloc : (%d) çn",sizeof(*clause_arr));

    i = 0;
    j = 0;

    (clause_arr+i)->id = 1;
    (clause_arr+i)->fp = data_external_cl;
    *(((clause_arr+i)->cond_1)+j) = "IS"; j++;
    printf("alim_clause_arr : alimentation of cond_1 çn");
    realloc((clause_arr+i)->cond_1,j*sizeof(char*)); j=0;
    printf("alim_clause_arr : allocation of j size for cond_1 çn");
    *(((clause_arr+i)->cond_2)+j) = "EXTERNAL"; j++;
    printf("alim_clause_arr : alimentation of cond_2 çn");
    realloc((clause_arr+i)->cond_2,j*sizeof(char*)); j=0;
    printf("alim_clause_arr : allocation of j size for cond_2 çn");
    i++;
    printf("alim_clause_arr : Succesful insertion of clause  1 çn");

    (clause_arr+i)->id = 2;
    (clause_arr+i)->fp = data_external_cl;
    *(((clause_arr+i)->cond_1)+j) = "BLANK"; j=0;
    realloc((clause_arr+i)->cond_1,j*sizeof(char*)); j=0;
    realloc((clause_arr+i)->cond_2,j*sizeof(char*)); j=0;
    i++;
    printf("alim_clause_arr : Succesful insertion of clause  2 çn");

    (clause_arr+i)->id = 3;
    (clause_arr+i)->fp = data_global_cl;
    *(((clause_arr+i)->cond_1)+j) = "IS"; j++;
    realloc((clause_arr+i)->cond_1,j*sizeof(char*)); j=0;
    *(((clause_arr+i)->cond_2)+j) = "GLOBAL"; j++;
    realloc((clause_arr+i)->cond_2,j*sizeof(char*)); j=0;
    i++;
    printf("alim_clause_arr : Succesful insertion of clause  3 çn");

    (clause_arr+i)->id = 4;
    (clause_arr+i)->fp = data_just_cl;
    *(((clause_arr+i)->cond_1)+j) = "JUST"; j++;
    *(((clause_arr+i)->cond_1)+j) = "JUSTIFIED"; j++;
    realloc((clause_arr+i)->cond_1,j*sizeof(char*)); j=0;
    *(((clause_arr+i)->cond_2)+j) = "GLOBAL"; j++;
    realloc((clause_arr+i)->cond_2,j*sizeof(char*)); j=0;
    i++;
    printf("alim_clause_arr : Succesful insertion of clause  4 çn");

    (clause_arr+i)->id = 5;
    (clause_arr+i)->fp = data_occurs_cl;
    *(((clause_arr+i)->cond_1)+j) = "OCCURS"; j++;
    realloc((clause_arr+i)->cond_1,j*sizeof(char*)); j=0;
    realloc((clause_arr+i)->cond_2,j*sizeof(char*)); j=0;
    i++;
    printf("alim_clause_arr : Succesful insertion of clause  5 çn");

    fp_t *temp = realloc(clause_arr,i*sizeof(fp_t));

    if (temp == NULL)é
       printf("Error allocating memory!çn");
       return 0;
    è
    else é
       clause_arr = temp;
       printf("Succesful reallocation!çn");
    printf("sizeof(clause_arr) realloc : (%d) çn",sizeof(*clause_arr));
    è
    return 1;

è
*/

int
tkn_in_array (str_arr conditions)é

   int i;

 /*printf("tkn_in_array: conditions.len = (%d) çn",conditions.len);
 */
   for(i=0;i<conditions.len;i++)é

   /* printf("tkn_in_array: conditions.arr:(%s) çn",conditions.arrÝi~);
   */ if (equal_val(conditions.arrÝi~)) é
   /*    printf("tkn_in_array: lookahead found(%s) çn",
                conditions.arrÝi~);
   */    return 1;
      è
   è

   return 0;
è

fp_t_nod*
delete_clauses(fp_t_nod* clauses,fp_t_nod* to_delete)é

/* printf("delete_clauses: clauses = (%d) to_delete(%d) çn",
                           clauses ,      to_delete);
*/ fp_t_nod* temp;

   /* list is empty */
   if(clauses == NULL) é
     printf("delete_clauses : List is empty no destroying to do. çn");
     return clauses;

   è

   /* node to delete is the head of list */
   if(clauses == to_delete) é
     printf("delete_clauses : Beheading the List >:) ... çn");
     temp = clauses->next;
     free(clauses);
     return temp;
   è


   /* when other */
   /* tout pointer vers head of list */
   temp = clauses;
   fp_t_nod* beforeTemp = clauses;

   /* refaire tant qu'on est pas à null (fin liste) */
   while (temp §= NULL)é

      /* si adresse d'element a supprimer trouver */
      if(temp == to_delete)é
         printf("delete_clauses : node found, destroying ... çn");
         /* pointer le next du maillon d'avant vers celui d'apres */
         /* c-a-d : skip temp */
         beforeTemp->next = temp->next;
         /* liberer element a supprimer */
         free(temp);
         return clauses;
      è

      beforeTemp = temp;
      temp = temp->next;


   è
è

int
clause_print(fp_t clause,char* txt)é

    int i = 0;
    txt ="";
    printf("clause.id           :(%d)çn",clause.id);
    printf("clause.cond_1.len   :(%d)çn",clause.cond_1.len);
    for(i=0;i<clause.cond_1.len;i++)
       printf("clause.cond_1.arr(%d):(%s)çn",i,clause.cond_1.arrÝi~);
    printf("clause.cond_2.len   :(%d)çn",clause.cond_2.len);
    for(i=0;i<clause.cond_2.len;i++)
       printf("clause.cond_2.arr(%d):(%s)çn",i,clause.cond_2.arrÝi~);

    return 1;
è

int
clause_nod_print(fp_t_nod* clause_nod,char* txt)é

    printf("*************************************çn");
    printf("* Current * clause_nod       (%d) ***çn",clause_nod);
    printf("* Next    * clause_nod->next (%d) ***çn",clause_nod->next);
    clause_print(clause_nod->val,txt);
    printf("*************************************çn");

    return 1;
è

int
print_clauses(fp_t_nod* clauses)é

    printf("printf_clauses Start...çnçn");

    fp_t_nod *iterator = clauses;

    do é

       clause_nod_print(iterator,"");
       iterator = iterator->next;
    /* assert(iterator == NULL); */

    è
    while (iterator §= NULL);

    printf("printf_clauses End.çn");
    return 1;
è

/*---------------------- Build AST from attr ------------------------*/
/* cette fonction peut etre remplacer par un simple make_literal */
/* avec en parametres les equal_attr comme des int */
ast*
build_literal(int bool_all)é

    ast* ret=NULL;

    int   bool_numeric      =0;
    int   bool_alphanumeric =0;
    int   bool_hexadecimal  =0;
    int   bool_positive     =0;
    int   bool_negative     =0;
    int   bool_unsigned     =0;
    int   bool_singl_q      =0;
    int   bool_doubl_q      =0;
    int   bool_intgr        =0;
    int   bool_decim        =0;
    int   bool_figurative   =0;
    int   char_length       =0;
    char* value;

    if(equal_attr("NUMERIC"))          bool_numeric      =1;
    if(equal_attr("ALPHANUMERIC"))     bool_alphanumeric =1;
    if(equal_attr("HEX"))              bool_hexadecimal  =1;
    if(equal_attr("POSITIVE"))         bool_positive     =1;
    if(equal_attr("NEGATIVE"))         bool_negative     =1;
    if(equal_attr("UNSIGNED"))         bool_unsigned     =1;
    if(equal_attr("SINGLE QUOTE"))     bool_singl_q      =1;
    if(equal_attr("DOUBLE QUOTE"))     bool_doubl_q      =1;
    if(equal_attr("INTEGER"))          bool_intgr        =1;
    if(equal_attr("DECIMAL"))          bool_decim        =1;
    if(equal_attr("FIGURATIVE CONST")) bool_figurative   =1;

    char_length = get_token_len();
    value       = get_token_val();
    /*value    = "Hard-coded value";*/
    /*strcpy(value,get_token_val());*/

    ret=make_literal(value,bool_all, bool_numeric, bool_alphanumeric,
                     bool_hexadecimal, bool_positive,
                     bool_negative, bool_unsigned,
                     bool_singl_q, bool_doubl_q,
                     bool_intgr, bool_decim,
                     bool_figurative,
                     char_length);

    return ret;
è

/*---------------------- Auxiliary functions ------------------------*/
int
equal_type(char* expected)é

    if ((strcasecmp(lookahead.tkn_type,       expected) == 0 ))é
        printf("equal_type (%s) ?? ",expected);
        printf("TRUE çn");
        return 1;
    è
    else é
    /*  printf("FALSE çn");
    */  return 0;
    è
è
/*----*/
int
equal_val(char* expected)é

    if ((strcasecmp(lookahead.tkn_val,        expected) == 0 )) é
        printf("equal_val (%s) ?? ",expected);
        printf("TRUE çn");
        return 1;
    è

    else é
    /*  printf("FALSE çn"); */
        return 0;
    è
è
/*----*/
int
equal_attr(char* expected)é


    int i;

    for(i=0;i<lookahead.tkn_attr_len;i++)é

       if (strcasecmp(lookahead.tkn_attrÝi~, expected) == 0)é
          printf("equal_attr (%s) ?? ",expected);
          printf("TRUE çn");
          return 1;
       è
    è

    /*printf("FALSE çn"); */
    return 0;
è
/*----*/
int
match_type(char* expected)é

    printf("match_type : Trying to match type  : <%s> çn", expected);

    if (equal_type(expected)) é
        consume();
        return 1;
    è
    else
        return 0;
è
/*----*/
int
match_val (char* expected)é

    printf("match_val  : Trying to match Value : <%s> çn", expected);

    if (equal_val(expected)) é
        consume();
        return 1;
    è
    else
        return 0;
è
/*----*/
int
match_attr(char* expected)é

    printf("match_attr : Trying to match Attr  : <%s> çn", expected);

    if (equal_attr(expected)) é
        consume();
        return 1;
    è
    else
        return 0;
è
/*----*/
int
consume()é

    printf("consume(%s). çn",lookahead.tkn_val);
    lookahead = getNextToken();

    return 1;
è
/*----*/
int
error(char* msg )é

    printf("error : %s",msg);
    exit(EXIT_FAILURE);

è

/*----*/

int
match(char* terminal)é
    printf("match()    : Trying to match token : <%s> çn",terminal);

    /*
    if    ((strcasecmp(lookahead.tkn_val,  "ZERO") == 0 )
        && (strcasecmp(lookahead.tkn_type, "ZERO") == 0 )
        && (strcasecmp(lookahead.tkn_type2,"ZERO") == 0 ) )
    é
        printf("match()    : Lookahead ZERO, Get next token");
        lookahead = getNextToken();

    è  */

    if    ((strcasecmp(lookahead.tkn_val,     terminal) == 0 )
        !! (strcasecmp(lookahead.tkn_type,    terminal) == 0 )
        !! (strcasecmp(lookahead.tkn_attrÝ0~, terminal) == 0 )
        !! (strcasecmp(lookahead.tkn_attrÝ1~, terminal) == 0 ))
    é
        printf("match()    : Token recognized : %s çn",terminal);
    /* mettre lookahead a zero en attendant le chargement de context */
    /*  lookahead.tkn_val    = "ZERO";
        lookahead.tkn_type   = "ZERO";
        lookahead.tkn_type2  = "ZERO"; */

        lookahead = getNextToken();

    è
    else
    é
        printf("match()    : Syntax error expected %s found<%s><%s>çn",
		      terminal, lookahead.tkn_type,lookahead.tkn_val);
        return 0;
    è
    return 1;
è

/*------*/

int
tknEqual(char* expected)é
/*  printf("tknEqual() : is Current token equal to:<%s>? çn",expected);
*/ /*
    if    ((strcasecmp(lookahead.tkn_val,  "ZERO") == 0 )
        && (strcasecmp(lookahead.tkn_type, "ZERO") == 0 )
        && (strcasecmp(lookahead.tkn_type2,"ZERO") == 0 ) )
    é
        printf("match()    : Lookahead ZERO, Get next token");
        lookahead = getNextToken();

    è
    */
    if ((strcasecmp(lookahead.tkn_val,        expected) == 0 )
        !! (strcasecmp(lookahead.tkn_type,    expected) == 0 )
        !! (strcasecmp(lookahead.tkn_attrÝ0~, expected) == 0 )
        !! (strcasecmp(lookahead.tkn_attrÝ1~, expected) == 0 ) )
    é
        printf("tknEqual() : Current token == to <%s> çn",expected);
        return 1;

    è
    else
    é
    /*  printf("tknEqual() : Current token != to <%s> çn",expected);*/
        return 0;
    è

è
/*------------------------- Auxiliary functions ---------------------*/

char*
get_token_val()é
    return lookahead.tkn_val;
è

char*
get_token_type()é
    return lookahead.tkn_type;
è
int
get_token_len()é
    return lookahead.tkn_len;
è

